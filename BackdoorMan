#!/usr/bin/python
# -*-coding: utf-8 -*-

# +==================+
# | Global Variables |
# +==================+

__license__ 	= '''
MIT License
Copyright (c) 2016 Yassine Addi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
__version__     = '2.3.1'
__author__      = 'Yassine Addi <yassineaddi.dev(at)gmail(dot)com>'
__description__ = 'A toolkit that helps you find malicious, hidden and suspicious PHP scripts and shells in a chosen destination.\r\nAuthor: %s.\r\nNOTE: This tool does not require Internet connection but it is highly recommended to benefit from all features.' % __author__
__usage__       = '%prog [options] destination1 [destination2 ...]'

import os, sys, time, re, socket, requests, json
from time import sleep
from datetime import datetime
from collections import defaultdict
from optparse import OptionParser

class Initialize:
	'''Main class.'''
	def __init__(self, destination):
		self.destination = destination
		self.totalThreats = 0
		self.isNR = self.isNetworkReachable()
		self.shells = open('databases/shells.txt', 'rb').read().split('\n')

		self.lowFuncts = '|'.join(
			open('databases/functions/low.txt', 'rb').read().strip().split('\n')
		)
		self.mediumFuncts = '|'.join(
			open('databases/functions/medium.txt', 'rb').read().strip().split('\n')
		)
		self.highFuncts = '|'.join(
			open('databases/functions/high.txt', 'rb').read().strip().split('\n')
		)
		self.lowActivs = '|'.join(
			open('databases/activities/low.txt', 'rb').read().strip().split('\n')
		)
		self.mediumActivs = '|'.join(
			open('databases/activities/medium.txt', 'rb').read().strip().split('\n')
		)
		self.highActivs = '|'.join(
			open('databases/activities/high.txt', 'rb').read().strip().split('\n')
		)

		isFile = os.path.isfile(destination)
		started = datetime.now()
		msg = ['Scanning', destination]; report.status(msg)
		msg = ['Started', started]; report.status(msg)
		if opts.output:
			msg = ['Saving', report.fn]; report.status(msg)
		if not isFile:
			self.list()
		else:
			if os.path.splitext(os.path.basename(destination))[1].upper().strip(".") == "PHP":
				self.PHPScan(destination)
			else:
				parser.error('scan of the specified destination is not yet supported')
		if self.totalThreats > 0:
			msg = '%i threat(s) detected in the scanned destination.' % self.totalThreats
			print(report.bmagenta + msg + report.end)
			report.writeTextFile(msg)
		ended = datetime.now()
		msg = ['Ended', ended]; report.status(msg)
		elapsed = ended - started
		elapsed = divmod(elapsed.days * 86400 + elapsed.seconds, 60)
		msg = ['Elapsed', '%s Minutes, %s Seconds' % (elapsed[0], elapsed[1])]; report.status(msg)

	def list(self):
		'''Recursively list files and launch scan.
		'''
		for dirpath, dirnames, filenames in os.walk(self.destination):
		    for filename in filenames:
		    	file = os.path.join(dirpath, filename)
		    	if os.path.splitext(filename)[1].upper().strip(".") == "PHP":
		    		self.PHPScan(file)

	def PHPScan(self, file):
		filename = os.path.basename(file)
		fileThreats = {}
		f = self.prepare(open(file, 'rb').read())
		string = ''.join(f.split('\n'))
		# +====================+
		# | Step 1: Web Shells |
		# +--------------------+
		# | detect web shells  |
		# | using a signature  |
		# | database.          |
		# +====================+
		for shell in self.shells:
			if shell in filename.lower():
				self.totalThreats += 1
				msg = ['Suspicious File Name', filename]; report.medium(msg)
				for val in self.getFileInfo(file):
					report.child(val)

		# +==========================+
		# |  Step 2: Scan of Source  |
		# +--------------------------+
		# | detect the use of        |
		# | suspicious or critical   |
		# | functions and activities.|
		# +==========================+
		for i, line in enumerate(f.split('\n')):
			if self.lowFuncts:
				results = re.findall(r'(?si)(%s)' % self.lowFuncts, line)
				if results:
					for result in results:
						fileThreats[result] = file
						self.totalThreats += 1
						msg = ['Suspicious Function', filename]; report.low(msg)
						msg = ['Function Name', result]; report.child(msg)
						msg = ['Line Number', i+1]; report.child(msg)
						for val in self.getFileInfo(file):
							report.child(val)
			if self.mediumFuncts:
				results = re.findall(r'(?si)(%s)' % self.mediumFuncts, line)
				if results:
					for result in results:
						fileThreats[result] = file
						self.totalThreats += 1
						msg = ['Suspicious Function', filename]; report.medium(msg)
						msg = ['Function Name', result]; report.child(msg)
						msg = ['Line Number', i+1]; report.child(msg)
						for val in self.getFileInfo(file):
							report.child(val)
			if self.highFuncts:
				results = re.findall(r'(?si)(%s)' % self.highFuncts, line)
				if results:
					for result in results:
						fileThreats[result] = file
						self.totalThreats += 1
						msg = ['Suspicious Function', filename]; report.high(msg)
						msg = ['Function Name', result]; report.child(msg)
						msg = ['Line Number', i+1]; report.child(msg)
						for val in self.getFileInfo(file):
							report.child(val)
			if self.lowActivs:
				results = re.findall(r'(?si)(%s)' % self.lowActivs, line)
				if results:
					for result in results:
						fileThreats[result] = file
						self.totalThreats += 1
						msg = ['Suspicious Activity', filename]; report.low(msg)
						msg = ['Activity', result]; report.child(msg)
						msg = ['Line Number', i+1]; report.child(msg)
						for val in self.getFileInfo(file):
							report.child(val)
			if self.mediumActivs:
				results = re.findall(r'(?si)(%s)' % self.mediumActivs, line)
				if results:
					for result in results:
						fileThreats[result] = file
						self.totalThreats += 1
						msg = ['Suspicious Activity', filename]; report.medium(msg)
						msg = ['Activity', result]; report.child(msg)
						msg = ['Line Number', i+1]; report.child(msg)
						for val in self.getFileInfo(file):
							report.child(val)
			if self.highActivs:
				results = re.findall(r'(?si)(%s)' % self.highActivs, line)
				if results:
					for result in results:
						fileThreats[result] = file
						self.totalThreats += 1
						msg = ['Suspicious Activity', filename]; report.high(msg)
						msg = ['Activity', result]; report.child(msg)
						msg = ['Line Number', i+1]; report.child(msg)
						for val in self.getFileInfo(file):
							report.child(val)

		# +=================================+
		# |   Step 3: Handle Special Cases  |
		# +---------------------------------+
		# | 1.detect the use of `` outside  |
		# |   quotes. Please note that PHP  |
		# |   will attempt to execute them  |
		# |   as execution operator same as |
		# |   shell_exec() function.        |
		# +=================================+
		qt, sq, sb, bs = None, False, False, ''
		for i, r in enumerate(string):
			if r in ['"', "'"]:
				if not sq:
					sq, qt = True, r
				else:
					if qt == r:
						if string[i-1] != '\\':
							sq, qt = False, None
			elif r == '`':
				if not sq:
					if sb:
						self.totalThreats += 1
						msg = ['Suspicious Activity', filename]; report.high(msg)
						msg = ['Activity', '`' + bs + '`']; report.child(msg)
						for val in self.getFileInfo(file):
							report.child(val)
						bs, sb = '', False
					else:
						sb = True
			if sb and r != '`':
				bs += r

		# +=================================+
		# |    Step 4: Re-Scan of Source    |
		# +---------------------------------+
		# | same as Step 4, but in this step|
		# | we'll decode and de-obfuscate   |
		# | and then re-launch the scan     |
		# | process, and we'll not output   |
		# | already reported threats.       |
		# | Please note that you need       |
		# | Internet connection.            |
		# +=================================+
		if self.isNR and opts.apis:
			servicer = Servicer(f)
			data = servicer.unphp()
			if data:
				r = requests.get(data['output'])
				f = self.prepare(r.content)
				for line in f.split('\n'):
					if self.lowFuncts:
						results = re.findall(r'(?si)(%s)' % self.lowFuncts, line)
						if results:
							for result in results:
								dis = True
								if result in fileThreats:
									if fileThreats[result] == file:
										dis = False
								if dis:
									self.totalThreats += 1
									msg = ['Suspicious Function', filename]; report.low(msg)
									msg = ['Function Name', result]; report.child(msg)
									for val in self.getFileInfo(file):
										report.child(val)
					if self.mediumFuncts:
						results = re.findall(r'(?si)(%s)' % self.mediumFuncts, line)
						if results:
							for result in results:
								dis = True
								if result in fileThreats:
									if fileThreats[result] == file:
										dis = False
								if dis:
									self.totalThreats += 1
									msg = ['Suspicious Function', filename]; report.medium(msg)
									msg = ['Function Name', result]; report.child(msg)
									for val in self.getFileInfo(file):
										report.child(val)
					if self.highFuncts:
						results = re.findall(r'(?si)(%s)' % self.highFuncts, line)
						if results:
							for result in results:
								dis = True
								if result in fileThreats:
									if fileThreats[result] == file:
										dis = False
								if dis:
									self.totalThreats += 1
									msg = ['Suspicious Function', filename]; report.high(msg)
									msg = ['Function Name', result]; report.child(msg)
									for val in self.getFileInfo(file):
										report.child(val)
					if self.lowActivs:
						results = re.findall(r'(?si)(%s)' % self.lowActivs, line)
						if results:
							for result in results:
								dis = True
								if result in fileThreats:
									if fileThreats[result] == file:
										dis = False
								if dis:
									self.totalThreats += 1
									msg = ['Suspicious Activity', filename]; report.low(msg)
									msg = ['Activity', result]; report.child(msg)
									for val in self.getFileInfo(file):
										report.child(val)
					if self.mediumActivs:
						results = re.findall(r'(?si)(%s)' % self.mediumActivs, line)
						if results:
							for result in results:
								dis = True
								if result in fileThreats:
									if fileThreats[result] == file:
										dis = False
								if dis:
									self.totalThreats += 1
									msg = ['Suspicious Activity', filename]; report.medium(msg)
									msg = ['Activity', result]; report.child(msg)
									for val in self.getFileInfo(file):
										report.child(val)
					if self.highActivs:
						results = re.findall(r'(?si)(%s)' % self.highActivs, line)
						if results:
							for result in results:
								dis = True
								if result in fileThreats:
									if fileThreats[result] == file:
										dis = False
								if dis:
									self.totalThreats += 1
									msg = ['Suspicious Activity', filename]; report.high(msg)
									msg = ['Activity', result]; report.child(msg)
									for val in self.getFileInfo(file):
										report.child(val)

		# +=================================+
		# |    Step 5: External Services    |
		# +---------------------------------+
		# | use external services (APIs) as |
		# | backup if network is reachable. |
		# +=================================+
		if self.isNR and opts.apis:
			servicer = Servicer(open(file, 'r'))
			response = servicer.shellray()
			if response:
				self.totalThreats += 1
				msg = ['Malware Detected', filename]; report.high(msg)
				msg = ['Service Provider', 'shellray']; report.child(msg)
				msg = ['Threat Name', response['threatname']]; report.child(msg)
				msg = ['SHA1', response['sha1']]; report.child(msg)
				msg = ['MD5', response['md5']]; report.child(msg)
				for val in self.getFileInfo(file):
					report.child(val)
			response = servicer.virustotal()
			if response:
				self.totalThreats += 1
				results = [response['scans'][antivirus]['result'] for antivirus in response['scans'] if response['scans'][antivirus]['detected']]
				msg = ['Malware Detected', filename]; report.high(msg)
				msg = ['Service Provider', 'virustotal']; report.child(msg)
				msg = ['Detection Ratio', '%i / %i' % (response['positives'], response['total'])]; report.child(msg)
				msg = ['Results', ', '.join(results)]; report.child(msg)
				for val in self.getFileInfo(file):
					report.child(val)

	def prepare(self, string):
		'''Returns a prepared string for scan process.
		string: The PHP string to analyze.
		'''
		preparedString = self.removeComments(string)
		return preparedString

	def removeComments(self, string):
		'''Returns a free of comments PHP string using regex.
		string: The PHP string to analyze.
		'''
		# +===========================================================+
		# | Link:   <http://stackoverflow.com/questions/2319019/      |
		# |         using-regex-to-remove-comments-from-source-files> |
		# | Author: Onur Yıldırım <https://github.com/onury>          |
		# +===========================================================+

		pattern = r"(\".*?\"|\'.*?\')|(/\*.*?\*/|#[^\r\n]*$|//[^\r\n]*$)"
		regex = re.compile(pattern, re.MULTILINE|re.DOTALL)
		def _replacer(match):
			if match.group(2):
				return "\n"*(len(match.group(2).split('\n'))-1)
			return match.group(1)
		return regex.sub(_replacer, string)

	def getFileInfo(self, file):
		(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)
		if not opts.info:
			return []
		return [
			['Full Path'    , file],
			['Owner'        , ((str)(uid) + ':' + str(gid))],
			['Permission'   , ((oct)(mode)[-3:])],
			['Last Accessed', ((time).ctime(atime))],
			['Last Modified', ((time).ctime(mtime))],
			['File Size'    , ((self).humanReadableFilesize(size))]
		]

	def humanReadableFilesize(self, filesize, suffix='B'):
		for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:
			if abs(filesize) < 1024.0:
				return '%3.1f%s%s' % (filesize, unit, suffix)
			filesize /= 1024.0
		return '%.1f%s%s' % (filesize, 'Yi', suffix)

	def isNetworkReachable(self):
		try:
			# Google's IP address.
			host, _, addrList = socket.gethostbyaddr('216.58.192.142')
			s = socket.create_connection((addrList[0], 80), 2)
			return True
		except:
			return False

class Servicer:
	'''Servicer class services the use of external services (APIs).'''
	def __init__(self, file):
		self.file = file
		self.config = json.load(open('config.js', 'r'))

	def shellray(self):
		# +=========================================+
		# | Service Provider: <http://shellray.com> |
		# +-----------------------------------------+
		# | 1.very high recognition performance for |
		# |   webshells.                            |
		# | 2.check suspicious PHP files online.    |
		# | 3.easy, fast and reliable.              |
		# | 4.classification for webshells with     |
		# |   behavior classification.              |
		# | 5.free services of nimbusec.            |
		# +=========================================+
		try:
			while 1:
				try:
					r = requests.post('https://shellray.com/upload', files={'file':self.file})
					if r.status_code is 200:
						break
				except:
					pass
				sleep(0.5)
			data = r.json()
			if not data['infected']:
				return False
			return data
		except requests.ConnectionError:
			return False

	def virustotal(self):
		# +===========================================+
		# | Service Provider: <http://virustotal.com> |
		# +-------------------------------------------+
		# | 1.eval + gzinflate + base64.              |
		# | 2.recursive de-obfuscating.               |
		# | 3.custom function and regex support.      |
		# +===========================================+
		apikey = self.config['VirusTotal_apikey']
		if apikey == '':
			return False
		try:
			r = requests.post('https://virustotal.com/vtapi/v2/file/scan', data={'apikey': apikey}, files={'file':self.file})
			data = r.json()
			if data['response_code'] == 0:
				return False
			sleep(3)
			r = requests.post("https://www.virustotal.com/vtapi/v2/file/report", data={"apikey":apikey, "resource":data["resource"]})
			try:
				data = r.json()
			except:
				return False
			if data['response_code'] == 0 or data['positives'] == 0:
				return False
			return data
		except requests.ConnectionError:
			return False

	def unphp(self):
		# +==========================================+
		# | Service Provider: <http://www.unphp.net> |
		# +------------------------------------------+
		# | returns decoded and de-obfuscated script |
		# +==========================================+
		apikey = self.config['UnPHP_apikey']
		if apikey == '':
			return False
		try:
			r = requests.post('http://www.unphp.net/api/v2/post', files={
				'file':self.file}, data={'api_key':apikey})
			data = r.json()
			if data['result'] == 'error':
				return False
			return data
		except requests.ConnectionError:
			return False

class Reporter:
	'''Reporter class is responsible for outputting software messages.'''
	def __init__(self, color=True):
		self.fn = opts.output
		self.log = ' '.join(sys.argv)
		# Colors.
		self.red      = ''
		self.bred     = ''
		self.bmagenta = ''
		self.cyan     = ''
		self.yellow   = ''
		self.orange   = ''
		self.blue     = ''
		self.end      = ''
		# Taken from Django.
		plat = sys.platform
		supportedPlatform = plat != 'Pocket PC' and (plat != 'win32' or 'ANSICON' in os.environ)
		isatty = hasattr(sys.stdout, 'isatty') and sys.stdout.isatty()
		# True if the running system's terminal supports color, and False otherwise.
		supportsColor = False if not supportedPlatform or not isatty or not color else True
		if supportsColor:
			self.red      = '\033[31m'
			self.bred     = '\033[41m'
			self.bmagenta = '\033[45m'
			self.cyan     = '\033[96m'
			self.yellow   = '\033[93m'
			self.orange   = '\033[38;5;208m'
			self.blue     = '\033[94m'
			self.end      = '\033[0m'

	def status(self, msg):
		self.writeTextFile('[*] ' + (msg[0] + ': ' + str(msg[1])) if type(msg) == list else msg)
		if type(msg) == list:
			msg = self.blue + '[*] ' + msg[0] + self.end + ': ' + str(msg[1])
		else:
			msg = self.blue + '[*] ' + msg + self.end
		print(msg)

	def error(self, msg):
		self.writeTextFile('[ERROR] ' + (msg[0] + ': ' + str(msg[1])) if type(msg) == list else msg)
		if type(msg) == list:
			msg = self.bred + '[ERROR] ' + msg[0] + self.end + ': ' + str(msg[1])
		else:
			msg = self.bred + '[ERROR] ' + msg + self.end
		print(msg)

	def child(self, msg):
		self.writeTextFile(' |  ' + (msg[0] + ': ' + str(msg[1])) if type(msg) == list else msg)
		msg = ' |  ' + self.cyan + msg[0] + self.end + ': ' + str(msg[1])
		print(msg)

	def low(self, msg):
		self.writeTextFile('[L] ' + (msg[0] + ': ' + str(msg[1])) if type(msg) == list else msg)
		if type(msg) == list:
			msg = self.yellow + '[L] ' + msg[0] + self.end + ': ' + str(msg[1])
		else:
			msg = self.yellow + '[L] ' + msg + self.end
		print(msg)

	def medium(self, msg):
		self.writeTextFile('[M] ' + (msg[0] + ': ' + str(msg[1])) if type(msg) == list else msg)
		if type(msg) == list:
			msg = self.orange + '[M] ' + msg[0] + self.end + ': ' + str(msg[1])
		else:
			msg = self.orange + '[M] ' + msg + self.end
		print(msg)

	def high(self, msg):
		self.writeTextFile('[H] ' + (msg[0] + ': ' + str(msg[1])) if type(msg) == list else msg)
		if type(msg) == list:
			msg = self.red + '[H] ' + msg[0] + self.end + ': ' + str(msg[1])
		else:
			msg = self.red + '[H] ' + msg + self.end
		print(msg)

	def writeTextFile(self, msg):
		if opts.output:
			self.log += '\n' + msg
			f = open(self.fn, 'w')
			f.write(self.log)
			f.close()

class MyParser(OptionParser):
	'''MyParser class overrides OptionParser class.'''
	def format_description(self, formatter):
		return self.description + '\n'

if __name__ == '__main__':
	# Command line arguments.
	parser = MyParser(usage=__usage__, description=__description__, version=__version__)
	parser.add_option('-o', '--output',
					dest='output',
					help='save output in a file')
	parser.add_option('--no-color',
					dest='color',
					action='store_false',
					default=True,
					help='do not use colors in the output')
	parser.add_option('--no-info',
					dest='info',
					action='store_false',
					default=True,
					help='do not show file information')
	parser.add_option('--no-apis',
					dest='apis',
					action='store_false',
					default=True,
					help='do not use APIs during scan (not recommended)')
	(opts, args) = parser.parse_args(sys.argv[1:])
	if not args:
		parser.error('no destination supplied')
	report = Reporter(opts.color)
	for dest in args:
		if not os.path.exists(dest):
			parser.error('the specified path does not exist: \'%s\'' % dest)
		try:
			# Start!
			Initialize(dest)
		except KeyboardInterrupt:
			print('')
			msg = 'Interrupt caught: exiting...'; report.error(msg)
			sys.exit()
